openapi: 3.0.0
info:
  title: Bookstore API
  description: A simple RESTful API for managing a bookstore's inventory built with Flask.
  version: 1.0.0
servers:
  - url: http://127.0.0.1:5000
    description: Local development server
paths:
  /books:
    get:
      summary: Retrieve a list of all books
      tags:
        - Books
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: object
                properties:
                  books:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book to the inventory
      tags:
        - Books
      requestBody:
        description: Book object that needs to be added to the inventory
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBook'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /books/{id}:
    get:
      summary: Retrieve a single book by ID
      tags:
        - Books
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the book to retrieve
      responses:
        '200':
          description: A single book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing book
      tags:
        - Books
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the book to update
      requestBody:
        description: Book object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBook'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a book by ID
      tags:
        - Books
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the book to delete
      responses:
        '200':
          description: Book deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                    example: true
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: '1984'
        author:
          type: string
          example: 'George Orwell'
        genre:
          type: string
          example: 'Dystopian'
        price:
          type: number
          format: float
          example: 9.99
    NewBook:
      type: object
      required:
        - title
        - author
        - genre
        - price
      properties:
        title:
          type: string
          example: 'The Great Gatsby'
        author:
          type: string
          example: 'F. Scott Fitzgerald'
        genre:
          type: string
          example: 'Classic'
        price:
          type: number
          format: float
          example: 10.99
    UpdateBook:
      type: object
      properties:
        title:
          type: string
          example: 'The Great Gatsby'
        author:
          type: string
          example: 'F. Scott Fitzgerald'
        genre:
          type: string
          example: 'Classic'
        price:
          type: number
          format: float
          example: 8.99
    Error:
      type: object
      properties:
        error:
          type: string
          example: 'Book not found'
